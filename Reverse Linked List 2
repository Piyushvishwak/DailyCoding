/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (head == nullptr) return nullptr;
        vector<int> arr;
        for (ListNode* temp = head; temp != nullptr; temp = temp->next) {
            arr.push_back(temp->val);
        }
        reverse(arr.begin() + left-1, arr.begin() + right);

        ListNode* newHead = new ListNode(arr[0]);
        ListNode* current = newHead;

        for (int i = 1; i < arr.size(); i++) {
            current->next = new ListNode(arr[i]);
            current = current->next;
        }
        return newHead;
    }
};
